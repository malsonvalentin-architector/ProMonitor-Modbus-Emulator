#!/usr/bin/env python3
"""
Modbus Emulator Enhanced v2.0 –¥–ª—è Railway
–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å–µ—Ä–≤–∏—Å —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
"""
import time
import socket
import struct
import threading
import random
import math
import logging
import os
from datetime import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),  # –î–ª—è Railway logs
    ]
)
logger = logging.getLogger(__name__)

class ModbusEmulatorEnhanced:
    def __init__(self, host='0.0.0.0', port=5020):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–º—É–ª—è—Ç–æ—Ä–∞
        host='0.0.0.0' - —Å–ª—É—à–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã (–¥–ª—è Railway)
        """
        self.host = host
        self.port = port
        self.running = False
        self.socket = None
        self.clients = []
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        self.registers = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–î)
        self.sensor_config = {
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏ (4 –∑–æ–Ω—ã)
            1000: {"type": "temperature", "zone": "Zone_1", "min": 18.0, "max": 25.0, "unit": "¬∞C"},
            1002: {"type": "temperature", "zone": "Zone_2", "min": 18.0, "max": 25.0, "unit": "¬∞C"},
            1004: {"type": "temperature", "zone": "Zone_3", "min": 18.0, "max": 25.0, "unit": "¬∞C"},
            1006: {"type": "temperature", "zone": "Zone_4", "min": 18.0, "max": 25.0, "unit": "¬∞C"},
            
            # –î–∞—Ç—á–∏–∫–∏ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ (3 –¥–∞—Ç—á–∏–∫–∞)
            2000: {"type": "humidity", "zone": "Zone_1", "min": 40.0, "max": 70.0, "unit": "%RH"},
            2002: {"type": "humidity", "zone": "Zone_2", "min": 40.0, "max": 70.0, "unit": "%RH"},
            2004: {"type": "humidity", "zone": "Zone_3", "min": 40.0, "max": 70.0, "unit": "%RH"},
            
            # –î–∞—Ç—á–∏–∫–∏ –¥–∞–≤–ª–µ–Ω–∏—è (2 –¥–∞—Ç—á–∏–∫–∞)
            3000: {"type": "pressure", "zone": "Compressor_1", "min": 1.0, "max": 12.0, "unit": "bar"},
            3002: {"type": "pressure", "zone": "Compressor_2", "min": 1.0, "max": 12.0, "unit": "bar"},
            
            # –°—á—ë—Ç—á–∏–∫–∏ –º–æ—â–Ω–æ—Å—Ç–∏ (3 —Å—á—ë—Ç—á–∏–∫–∞)
            4000: {"type": "power", "zone": "HVAC_Unit_1", "min": 2.0, "max": 15.0, "unit": "kW"},
            4002: {"type": "power", "zone": "HVAC_Unit_2", "min": 2.0, "max": 15.0, "unit": "kW"},
            4004: {"type": "power", "zone": "HVAC_Unit_3", "min": 2.0, "max": 15.0, "unit": "kW"},
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        self.init_registers()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.update_thread = None
        
        logger.info(f"ü§ñ Modbus Emulator Enhanced v2.0 initialized")
        logger.info(f"üìç Host: {self.host}, Port: {self.port}")
        logger.info(f"üîß Configured {len(self.sensor_config)} sensors")

    def init_registers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏"""
        for address, config in self.sensor_config.items():
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            value = random.uniform(config["min"], config["max"])
            
            # Float32 -> 2 —Ä–µ–≥–∏—Å—Ç—Ä–∞ (High, Low)
            self.registers[address] = value
            
            logger.info(f"üìä {config['zone']} ({config['type']}): {value:.1f} {config['unit']}")

    def update_sensor_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤ (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è)"""
        while self.running:
            try:
                updated_sensors = []
                
                for address, config in self.sensor_config.items():
                    current_value = self.registers.get(address, 0.0)
                    
                    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –¥–∞—Ç—á–∏–∫–∞
                    if config["type"] == "temperature":
                        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: –º–µ–¥–ª–µ–Ω–Ω—ã–µ –ø–ª–∞–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ¬±0.5¬∞C
                        change = random.uniform(-0.5, 0.5)
                        new_value = max(config["min"], min(config["max"], current_value + change))
                        
                    elif config["type"] == "humidity":
                        # –í–ª–∞–∂–Ω–æ—Å—Ç—å: –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è ¬±2%
                        change = random.uniform(-2.0, 2.0)
                        new_value = max(config["min"], min(config["max"], current_value + change))
                        
                    elif config["type"] == "pressure":
                        # –î–∞–≤–ª–µ–Ω–∏–µ: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä–∞)
                        cycle = math.sin(time.time() / 30) * 2  # 30-—Å–µ–∫—É–Ω–¥–Ω—ã–π —Ü–∏–∫–ª
                        noise = random.uniform(-0.3, 0.3)
                        base_pressure = (config["min"] + config["max"]) / 2
                        new_value = max(config["min"], min(config["max"], base_pressure + cycle + noise))
                        
                    elif config["type"] == "power":
                        # –ú–æ—â–Ω–æ—Å—Ç—å: –∫–æ–ª–µ–±–∞–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∞–≥—Ä—É–∑–∫–æ–π
                        base_load = (config["min"] + config["max"]) * 0.7  # 70% –±–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
                        variation = random.uniform(-1.5, 1.5)
                        new_value = max(config["min"], min(config["max"], base_load + variation))
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    self.registers[address] = round(new_value, 2)
                    updated_sensors.append(f"{config['zone']}: {new_value:.1f}{config['unit']}")
                
                # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)
                logger.info(f"üîÑ Updated: {', '.join(updated_sensors)}")
                
                time.sleep(5)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"‚ùå Error updating sensor data: {e}")
                time.sleep(5)

    def float_to_modbus_registers(self, value):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Float32 –≤ 2 Modbus —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
        # –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º float –≤ 4 –±–∞–π—Ç–∞ (big-endian)
        packed = struct.pack('>f', value)
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∫–∞–∫ 2 —Ä–µ–≥–∏—Å—Ç—Ä–∞ (16-bit –∫–∞–∂–¥—ã–π)
        reg1, reg2 = struct.unpack('>HH', packed)
        return reg1, reg2

    def handle_modbus_request(self, data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ Modbus TCP –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            if len(data) < 12:
                return None
                
            # –ü–∞—Ä—Å–∏–º Modbus TCP –∑–∞–≥–æ–ª–æ–≤–æ–∫
            transaction_id = struct.unpack('>H', data[0:2])[0]
            protocol_id = struct.unpack('>H', data[2:4])[0]
            length = struct.unpack('>H', data[4:6])[0]
            unit_id = data[6]
            function_code = data[7]
            
            if function_code == 0x03:  # Read Holding Registers
                start_address = struct.unpack('>H', data[8:10])[0]
                quantity = struct.unpack('>H', data[10:12])[0]
                
                logger.info(f"üìñ Modbus Request: Read {quantity} registers from {start_address}")
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                response_data = []
                
                for i in range(quantity):
                    reg_address = start_address + i
                    
                    # –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–∞—Ç—á–∏–∫–∞ (Float32 –∑–∞–Ω–∏–º–∞–µ—Ç 2 —Ä–µ–≥–∏—Å—Ç—Ä–∞)
                    base_address = (reg_address // 2) * 2
                    
                    if base_address in self.registers:
                        value = self.registers[base_address]
                        reg1, reg2 = self.float_to_modbus_registers(value)
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                        if reg_address % 2 == 0:
                            response_data.append(reg1)  # –í—ã—Å—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                        else:
                            response_data.append(reg2)  # –ù–∏–∑—à–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
                    else:
                        response_data.append(0)  # –ü—É—Å—Ç–æ–π —Ä–µ–≥–∏—Å—Ç—Ä
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º Modbus TCP –æ—Ç–≤–µ—Ç
                byte_count = len(response_data) * 2
                response = struct.pack('>HHHBBB', 
                    transaction_id, 0, 3 + byte_count, unit_id, function_code, byte_count)
                
                for reg_value in response_data:
                    response += struct.pack('>H', reg_value)
                
                return response
                
        except Exception as e:
            logger.error(f"‚ùå Error handling Modbus request: {e}")
            
        return None

    def handle_client(self, client_socket, address):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info(f"üîå Client connected: {address}")
        
        try:
            while self.running:
                data = client_socket.recv(1024)
                if not data:
                    break
                    
                response = self.handle_modbus_request(data)
                if response:
                    client_socket.send(response)
                    
        except Exception as e:
            logger.error(f"‚ùå Client error: {e}")
        finally:
            client_socket.close()
            logger.info(f"üîå Client disconnected: {address}")

    def start(self):
        """–ó–∞–ø—É—Å–∫ —ç–º—É–ª—è—Ç–æ—Ä–∞"""
        try:
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            self.socket.bind((self.host, self.port))
            self.socket.listen(10)
            
            self.running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            self.update_thread = threading.Thread(target=self.update_sensor_data)
            self.update_thread.daemon = True
            self.update_thread.start()
            
            logger.info(f"üöÄ Modbus Emulator started on {self.host}:{self.port}")
            logger.info(f"üéØ Waiting for connections...")
            
            while self.running:
                try:
                    client_socket, address = self.socket.accept()
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    client_thread = threading.Thread(
                        target=self.handle_client, 
                        args=(client_socket, address)
                    )
                    client_thread.daemon = True
                    client_thread.start()
                    
                except Exception as e:
                    if self.running:
                        logger.error(f"‚ùå Error accepting connection: {e}")
                        
        except Exception as e:
            logger.error(f"‚ùå Failed to start emulator: {e}")
            raise

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç–º—É–ª—è—Ç–æ—Ä–∞"""
        logger.info("üõë Stopping Modbus Emulator...")
        self.running = False
        
        if self.socket:
            self.socket.close()
            
        logger.info("‚úÖ Modbus Emulator stopped")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è (–¥–ª—è Railway)
    port = int(os.environ.get('PORT', 5020))
    
    # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —ç–º—É–ª—è—Ç–æ—Ä
    emulator = ModbusEmulatorEnhanced('0.0.0.0', port)
    
    try:
        emulator.start()
    except KeyboardInterrupt:
        logger.info("üîÑ Received interrupt signal")
    except Exception as e:
        logger.error(f"‚ùå Fatal error: {e}")
    finally:
        emulator.stop()

if __name__ == "__main__":
    main()